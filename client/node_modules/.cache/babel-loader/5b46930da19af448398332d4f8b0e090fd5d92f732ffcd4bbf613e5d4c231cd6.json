{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[token,setToken]=useState(localStorage.getItem(\"token\"));const[user,setUser]=useState(null);useEffect(()=>{if(token){// You can decode the token to get user data if needed\nsetUser({username:\"vivek\"});// hardcoded for now\n}},[token]);const login=newToken=>{localStorage.setItem(\"token\",newToken);setToken(newToken);setUser({username:\"vivek\"});// ideally decoded from token\n};const logout=()=>{localStorage.removeItem(\"token\");setToken(null);setUser(null);};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{token,user,login,logout},children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error(\"useAuth must be used within an AuthProvider\");}return context;};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","token","setToken","localStorage","getItem","user","setUser","username","login","newToken","setItem","logout","removeItem","Provider","value","useAuth","context","Error"],"sources":["/Users/vivekkumar/google-search-app/client/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\n\ninterface AuthContextType {\n  token: string | null;\n  user: { username: string } | null;\n  login: (token: string) => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [token, setToken] = useState<string | null>(localStorage.getItem(\"token\"));\n  const [user, setUser] = useState<{ username: string } | null>(null);\n\n  useEffect(() => {\n    if (token) {\n      // You can decode the token to get user data if needed\n      setUser({ username: \"vivek\" }); // hardcoded for now\n    }\n  }, [token]);\n\n  const login = (newToken: string) => {\n    localStorage.setItem(\"token\", newToken);\n    setToken(newToken);\n    setUser({ username: \"vivek\" }); // ideally decoded from token\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setToken(null);\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ token, user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,SAAS,CAAEC,QAAQ,KAAmB,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBASzF,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAA8BO,SAAS,CAAC,CAEzE,MAAO,MAAM,CAAAC,YAAY,CAAGC,IAAA,EAA2C,IAA1C,CAAEC,QAAkC,CAAC,CAAAD,IAAA,CAChE,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAgBU,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAChF,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGb,QAAQ,CAA8B,IAAI,CAAC,CAEnED,SAAS,CAAC,IAAM,CACd,GAAIS,KAAK,CAAE,CACT;AACAK,OAAO,CAAC,CAAEC,QAAQ,CAAE,OAAQ,CAAC,CAAC,CAAE;AAClC,CACF,CAAC,CAAE,CAACN,KAAK,CAAC,CAAC,CAEX,KAAM,CAAAO,KAAK,CAAIC,QAAgB,EAAK,CAClCN,YAAY,CAACO,OAAO,CAAC,OAAO,CAAED,QAAQ,CAAC,CACvCP,QAAQ,CAACO,QAAQ,CAAC,CAClBH,OAAO,CAAC,CAAEC,QAAQ,CAAE,OAAQ,CAAC,CAAC,CAAE;AAClC,CAAC,CAED,KAAM,CAAAI,MAAM,CAAGA,CAAA,GAAM,CACnBR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC,CAChCV,QAAQ,CAAC,IAAI,CAAC,CACdI,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,CAED,mBACEX,IAAA,CAACC,WAAW,CAACiB,QAAQ,EAACC,KAAK,CAAE,CAAEb,KAAK,CAAEI,IAAI,CAAEG,KAAK,CAAEG,MAAO,CAAE,CAAAX,QAAA,CACzDA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAe,OAAO,CAAGA,CAAA,GAAuB,CAC5C,KAAM,CAAAC,OAAO,CAAGzB,UAAU,CAACK,WAAW,CAAC,CACvC,GAAI,CAACoB,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}